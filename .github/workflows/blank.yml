name: Cloud PC Setup (Windows + Tailscale + RDP + Wallpaper + Dark Mode + Auto Notepad)

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 300   # 5 hours

    steps:
      - name: Install Tailscale
        shell: powershell
        run: |
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe -OutFile tailscale-installer.exe
          Start-Process .\tailscale-installer.exe -ArgumentList "/quiet" -Wait
          Remove-Item .\tailscale-installer.exe

      - name: Authenticate to Tailscale
        shell: cmd
        run: |
          "C:\Program Files\Tailscale\tailscale.exe" up

      - name: Create temporary local user and add to groups (PowerShell)
        shell: powershell
        run: |
          # Create a secure password (you provided act3-1234)
          $plain = "act3-1234"
          $secure = ConvertTo-SecureString $plain -AsPlainText -Force

          # Create local user (if exists, remove and recreate to be idempotent)
          if (Get-LocalUser -Name 'clouduser' -ErrorAction SilentlyContinue) {
            # Optionally remove existing user first (uncomment if you want)
            # Remove-LocalUser -Name 'clouduser' -ErrorAction SilentlyContinue
            Write-Host "User 'clouduser' already exists."
          } else {
            New-LocalUser -Name 'clouduser' -Password $secure -FullName 'Cloud User' -Description 'Temporary cloud user' -PasswordNeverExpires:$true
          }

          # Ensure the user is enabled
          Enable-LocalUser -Name 'clouduser'

          # Add to groups
          Add-LocalGroupMember -Group "Administrators" -Member 'clouduser'
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member 'clouduser'

          # Output the credentials in plain text (visible in workflow logs)
          Write-Host "User: clouduser"
          Write-Host "Password: $plain"

      - name: Apply wallpaper and dark theme for clouduser
        shell: powershell
        run: |
          $url = "https://dro.pm/cloudus"
          $wallpaperPath = "C:\Users\Public\wallpaper.png"

          Invoke-WebRequest $url -OutFile $wallpaperPath -UseBasicParsing

          # Apply wallpaper for the current session (the runner's user)
          Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\' -Name wallpaper -Value $wallpaperPath
          RUNDLL32.EXE user32.dll,UpdatePerUserSystemParameters

          # Enable dark mode for current session user
          $themePath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize"
          New-Item -Path $themePath -Force | Out-Null
          Set-ItemProperty -Path $themePath -Name "AppsUseLightTheme" -Value 0 -Type DWord
          Set-ItemProperty -Path $themePath -Name "SystemUsesLightTheme" -Value 0 -Type DWord

      - name: Create welcome message and scheduled task to run on clouduser logon
        shell: powershell
        run: |
          # Put the welcome file on the Public Desktop so it's visible to any user
          $publicDesktop = "C:\Users\Public\Desktop"
          $msgPath = Join-Path $publicDesktop "welcome.txt"
          "ENJOY YOUR PC!" | Out-File $msgPath -Encoding UTF8

          # Create a scheduled task that runs at logon for the clouduser account and opens notepad showing the public welcome file
          $taskName = "WelcomeNoteForCloudUser"
          $action = New-ScheduledTaskAction -Execute "notepad.exe" -Argument $msgPath
          $trigger = New-ScheduledTaskTrigger -AtLogOn -User "clouduser"
          $principal = New-ScheduledTaskPrincipal -UserId "clouduser" -LogonType Interactive -RunLevel LeastPrivilege
          $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Compatibility Win10

          # If task exists, remove it first
          if (Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue) {
            Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
          }

          Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Principal $principal -Settings $settings

      - name: Keep runner alive for 5 hours
        shell: powershell
        run: |
          Start-Sleep -Seconds 18000
